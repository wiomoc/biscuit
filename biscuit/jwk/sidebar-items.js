initSidebarItems({"enum":[["AlgorithmParameters","Algorithm specific parameters"],["EllipticCurve","Type of cryptographic curve used by a key. This is defined in RFC 7518 #7.6"],["EllipticCurveKeyType","Key type value for an Elliptic Curve Key. This single value enum is a workaround for Rust not supporting associated constants."],["KeyOperations","Operations that the key is intended to be used for. This enum is serialized `untagged`"],["KeyType","Type of Key as specified in RFC 7518."],["OctetKeyType","Key type value for an Octet symmetric Key. This single value enum is a workaround for Rust not supporting associated constants."],["PublicKeyUse","The intended usage of the public `KeyType`. This enum is serialized `untagged`"],["RSAKeyType","Key type value for an RSA Key. This single value enum is a workaround for Rust not supporting associated constants."]],"struct":[["CommonParameters","Common JWK parameters"],["EllipticCurveKeyParameters","Parameters for an Elliptic Curve Key"],["JWK","A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value. Type `T` is a struct representing additional JWK properties"],["JWKSet","A JSON object that represents a set of JWKs."],["OtherPrimesInfo","The \"oth\" (other primes info) parameter contains an array of information about any third and subsequent primes, should they exist. When only two primes have been used (the normal case), this parameter MUST be omitted.  When three or more primes have been used, the number of array elements MUST be the number of primes used minus two. For more information on this case, see the description of the `OtherPrimeInfo` parameters in Appendix A.1.2 of RFC 3447, upon which the following parameters are modeled.  If the consumer of a JWK does not support private keys with more than two primes and it encounters a private key that includes the \"oth\" parameter, then it MUST NOT use the key."],["RSAKeyParameters","Parameters for a RSA Key"]]});